// Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.

// Ported from shared\dxgi.h and shared\dxgi1_3.h in the Windows SDK for Windows 10.0.15063.0
// Original source is Copyright © Microsoft. All rights reserved.

using System;
using System.Runtime.InteropServices;
using TerraFX.Interop.Unknown;

namespace TerraFX.Interop.DXGI
{
    unsafe public static class DXGI
    {
        #region Constants
        public const uint DEBUG_BINARY_VERSION = 1;

        public const uint INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024;

        public static readonly Guid IID_IDXGIObject = new Guid(0xAEC22FB8, 0x76F3, 0x4639, 0x9B, 0xE0, 0x28, 0xEB, 0x43, 0xA6, 0x7A, 0x2E);

        public static readonly Guid IID_IDXGIDeviceSubObject = new Guid(0x3D3E0379, 0xF9DE, 0x4D58, 0xBB, 0x6C, 0x18, 0xD6, 0x29, 0x92, 0xF1, 0xA6);

        public static readonly Guid IID_IDXGIResource = new Guid(0x035F3AB4, 0x482E, 0x4E50, 0xB4, 0x1F, 0x8A, 0x7F, 0x8B, 0xD8, 0x96, 0x0B);

        public static readonly Guid IID_IDXGIKeyedMutex = new Guid(0x9D8E1289, 0xD7B3, 0x465F, 0x81, 0x26, 0x25, 0x0E, 0x34, 0x9A, 0xF8, 0x5D);

        public static readonly Guid IID_IDXGISurface = new Guid(0xCAFCB56C, 0x6AC3, 0x4889, 0xBF, 0x47, 0x9E, 0x23, 0xBB, 0xD2, 0x60, 0xEC);

        public static readonly Guid IID_IDXGISurface1 = new Guid(0x4AE63092, 0x6327, 0x4C1B, 0x80, 0xAE, 0xBF, 0xE1, 0x2E, 0xA3, 0x2B, 0x86);

        public static readonly Guid IID_IDXGIAdapter = new Guid(0x2411E7E1, 0x12AC, 0x4CCF, 0xBD, 0x14, 0x97, 0x98, 0xE8, 0x53, 0x4D, 0xC0);

        public static readonly Guid IID_IDXGIOutput = new Guid(0xAE02EEDB, 0xC735, 0x4690, 0x8D, 0x52, 0x5A, 0x8D, 0xC2, 0x02, 0x13, 0xAA);

        public static readonly Guid IID_IDXGISwapChain = new Guid(0x310D36A0, 0xD2E7, 0x4C0A, 0xAA, 0x04, 0x6A, 0x9D, 0x23, 0xB8, 0x88, 0x6A);

        public static readonly Guid IID_IDXGIFactory = new Guid(0x7B7166EC, 0x21C7, 0x44AE, 0xB2, 0x1A, 0xC9, 0xAE, 0x32, 0x1A, 0xE3, 0x69);

        public static readonly Guid IID_IDXGIDevice = new Guid(0x54EC77FA, 0x1377, 0x44E6, 0x8C, 0x32, 0x88, 0xFD, 0x5F, 0x44, 0xC8, 0x4C);

        public static readonly Guid IID_IDXGIFactory1 = new Guid(0x770AAE78, 0xF26F, 0x4DBA, 0xA8, 0x29, 0x25, 0x3C, 0x83, 0xD1, 0xB3, 0x87);

        public static readonly Guid IID_IDXGIAdapter1 = new Guid(0x29038F61, 0x3839, 0x4626, 0x91, 0xFD, 0x08, 0x68, 0x79, 0x01, 0x1A, 0x05);

        public static readonly Guid IID_IDXGIDevice1 = new Guid(0x77DB970F, 0x6276, 0x48BA, 0xBA, 0x28, 0x07, 0x01, 0x43, 0xB4, 0x39, 0x2C);

        public static readonly Guid IID_IDXGIDisplayControl = new Guid(0xEA9DBF1A, 0xC88E, 0x4486, 0x85, 0x4A, 0x98, 0xAA, 0x01, 0x38, 0xF3, 0x0C);

        public static readonly Guid IID_IDXGIOutputDuplication = new Guid(0x191CFAC3, 0xA341, 0x470D, 0xB2, 0x6E, 0xA8, 0x64, 0xF4, 0x28, 0x31, 0x9C);

        public static readonly Guid IID_IDXGISurface2 = new Guid(0xABA496DD, 0xB617, 0x4CB8, 0xA8, 0x66, 0xBC, 0x44, 0xD7, 0xEB, 0x1F, 0xA2);

        public static readonly Guid IID_IDXGIResource1 = new Guid(0x30961379, 0x4609, 0x4A41, 0x99, 0x8E, 0x54, 0xFE, 0x56, 0x7E, 0xE0, 0xC1);

        public static readonly Guid IID_IDXGIDevice2 = new Guid(0x05008617, 0xFBFD, 0x4051, 0xA7, 0x90, 0x14, 0x48, 0x84, 0xB4, 0xF6, 0xA9);

        public static readonly Guid IID_IDXGISwapChain1 = new Guid(0x790A45F7, 0x0D42, 0x4876, 0x98, 0x3A, 0x0A, 0x55, 0xCF, 0xE6, 0xF4, 0xAA);

        public static readonly Guid IID_IDXGIFactory2 = new Guid(0x50C83A1C, 0xE072, 0x4C48, 0x87, 0xB0, 0x36, 0x30, 0xFA, 0x36, 0xA6, 0xD0);

        public static readonly Guid IID_IDXGIAdapter2 = new Guid(0x0AA1AE0A, 0xFA0E, 0x4B84, 0x86, 0x44, 0xE0, 0x5F, 0xF8, 0xE5, 0xAC, 0xB5);

        public static readonly Guid IID_IDXGIOutput1 = new Guid(0x00CDDEA8, 0x939B, 0x4B83, 0xA3, 0x40, 0xA6, 0x85, 0x22, 0x66, 0x66, 0xCC);

        public static readonly Guid IID_IDXGIDevice3 = new Guid(0x6007896C, 0x3244, 0x4AFD, 0xBF, 0x18, 0xA6, 0xD3, 0xBE, 0xDA, 0x50, 0x23);

        public static readonly Guid IID_IDXGISwapChain2 = new Guid(0xA8BE2AC4, 0x199F, 0x4946, 0xB3, 0x31, 0x79, 0x59, 0x9F, 0xB9, 0x8D, 0xE7);

        public static readonly Guid IID_IDXGIOutput2 = new Guid(0x595E39D1, 0x2724, 0x4663, 0x99, 0xB1, 0xDA, 0x96, 0x9D, 0xE2, 0x83, 0x64);

        public static readonly Guid IID_IDXGIFactory3 = new Guid(0x25483823, 0xCD46, 0x4C7D, 0x86, 0xCA, 0x47, 0xAA, 0x95, 0xB8, 0x37, 0xBD);

        public static readonly Guid IID_IDXGIDecodeSwapChain = new Guid(0x2633066B, 0x4514, 0x4C7A, 0x8F, 0xD8, 0x12, 0xEA, 0x98, 0x05, 0x9D, 0x18);

        public static readonly Guid IID_IDXGIFactoryMedia = new Guid(0x41E7D1F2, 0xA591, 0x4F7B, 0xA2, 0xE5, 0xFA, 0x9C, 0x84, 0x3E, 0x1C, 0x12);

        public static readonly Guid IID_IDXGISwapChainMedia = new Guid(0xDD95B90B, 0xF05F, 0x4F6A, 0xBD, 0x65, 0x25, 0xBF, 0xB2, 0x64, 0xBD, 0x84);

        public static readonly Guid IID_IDXGIOutput3 = new Guid(0x8A6BB301, 0x7E7E, 0x41F4, 0xA8, 0xE0, 0x5B, 0x32, 0xF7, 0xF9, 0x9B, 0x18);

        public static readonly Guid IID_IDXGISwapChain3 = new Guid(0x94D99BDB, 0xF1F8, 0x4AB0, 0xB2, 0x36, 0x7D, 0xA0, 0x17, 0x0E, 0xDA, 0xB1);

        public static readonly Guid IID_IDXGIOutput4 = new Guid(0xDC7DCA35, 0x2196, 0x414D, 0x9F, 0x53, 0x61, 0x78, 0x84, 0x03, 0x2A, 0x60);

        public static readonly Guid IID_IDXGIFactory4 = new Guid(0x1BC6EA02, 0xEF36, 0x464F, 0xBF, 0x0C, 0x21, 0xCA, 0x39, 0xE5, 0x16, 0x8A);

        public static readonly Guid IID_IDXGIAdapter3 = new Guid(0x645967A4, 0x1392, 0x4310, 0xA7, 0x98, 0x80, 0x53, 0xCE, 0x3E, 0x93, 0xFD);

        public static readonly Guid IID_IDXGIOutput5 = new Guid(0x80A07424, 0xAB52, 0x42EB, 0x83, 0x3C, 0x0C, 0x42, 0xFD, 0x28, 0x2D, 0x98);

        public static readonly Guid IID_IDXGISwapChain4 = new Guid(0x3D585D5A, 0xBD4A, 0x489E, 0xB1, 0xF4, 0x3D, 0xBC, 0xB6, 0x45, 0x2F, 0xFB);

        public static readonly Guid IID_IDXGIDevice4 = new Guid(0x95B4F95F, 0xD8DA, 0x4CA4, 0x9E, 0xE6, 0x3B, 0x76, 0xD5, 0x96, 0x8A, 0x10);

        public static readonly Guid IID_IDXGIFactory5 = new Guid(0x7632E1F5, 0xEE65, 0x4DCA, 0x87, 0xFD, 0x84, 0xCD, 0x75, 0xF8, 0x83, 0x8D);

        public static readonly Guid IID_IDXGIAdapter4 = new Guid(0x3C8D99D1, 0x4FBF, 0x4181, 0xA8, 0x2C, 0xAF, 0x66, 0xBF, 0x7B, 0xD2, 0x4E);

        public static readonly Guid IID_IDXGIOutput6 = new Guid(0x068346E8, 0xAAEC, 0x4B84, 0xAD, 0xD7, 0x13, 0x7F, 0x51, 0x3F, 0x77, 0xA1);

        public static readonly Guid IID_IDXGIInfoQueue = new Guid(0xD67441C7, 0x672A, 0x476F, 0x9E, 0x82, 0xCD, 0x55, 0xB4, 0x49, 0x49, 0xCE);

        public static readonly Guid IID_IDXGIDebug = new Guid(0x119E7452, 0xDE9E, 0x40FE, 0x88, 0x06, 0x88, 0xF9, 0x0C, 0x12, 0xB4, 0x41);

        public static readonly Guid IID_IDXGIDebug1 = new Guid(0xC5A05F0C, 0x16F2, 0x4ADF, 0x9F, 0x4D, 0xA8, 0xC4, 0xD5, 0x8A, 0xC5, 0x50);
        #endregion

        #region Methods
        [DllImport("DXGI", BestFitMapping = false, CallingConvention = CallingConvention.Winapi, CharSet = CharSet.Unicode, EntryPoint = "CreateDXGIFactory", ExactSpelling = true, PreserveSig = true, SetLastError = false, ThrowOnUnmappableChar = false)]
        public static extern HRESULT CreateFactory(
            [In] /* readonly */ Guid* riid,
            [Out] void** ppFactory
        );

        [DllImport("DXGI", BestFitMapping = false, CallingConvention = CallingConvention.Winapi, CharSet = CharSet.Unicode, EntryPoint = "CreateDXGIFactory1", ExactSpelling = true, PreserveSig = true, SetLastError = false, ThrowOnUnmappableChar = false)]
        public static extern HRESULT CreateFactory1(
            [In] /* readonly */ Guid* riid,
            [Out] void** ppFactory
        );

        [DllImport("DXGI", BestFitMapping = false, CallingConvention = CallingConvention.Winapi, CharSet = CharSet.Unicode, EntryPoint = "CreateDXGIFactory2", ExactSpelling = true, PreserveSig = true, SetLastError = false, ThrowOnUnmappableChar = false)]
        public static extern void CreateFactory2(
            [In] DXGI_CREATE_FACTORY_FLAG Flags,
            [In] /* readonly */ Guid* riid,
            [Out] void** ppFactory
        );

        [DllImport("DXGIDebug", BestFitMapping = false, CallingConvention = CallingConvention.Winapi, CharSet = CharSet.Unicode, EntryPoint = "DXGIGetDebugInterface", ExactSpelling = true, PreserveSig = true, SetLastError = false, ThrowOnUnmappableChar = false)]
        public static extern void GetDebugInterface(
            [In] /* readonly */ Guid* riid,
            [Out] void** pDebug
        );

        [DllImport("DXGI", BestFitMapping = false, CallingConvention = CallingConvention.Winapi, CharSet = CharSet.Unicode, EntryPoint = "DXGIGetDebugInterface1", ExactSpelling = true, PreserveSig = true, SetLastError = false, ThrowOnUnmappableChar = false)]
        public static extern void GetDebugInterface1(
            [In] uint Flags,
            [In] /* readonly */ Guid* riid,
            [Out] void** pDebug
        );
        #endregion
    }
}
